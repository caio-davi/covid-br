{"version":3,"sources":["states.js","components/LeafLetMap.jsx","components/LineChart.jsx","components/Options.jsx","components/App.jsx","index.js"],"names":["states","LeafletMap","props","getPosition","uId","i","uid","Map","center","zoom","TileLayer","url","attribution","markers","cases","position","parseInt","undefined","dataType","push","Circle","id","radius","color","sumStatus","data","status","count","values","state","labels","dates","date","buildDataset","label","datasets","dataOptions","key","name","borderColor","backgroundColor","console","log","chartData","LineChart","className","options","responsive","style","margin","Status","statusCollection","newStatus","showOnMapOptions","value","Options","day","min","max","length","defaultValue","handle","handleSlider","onChange","handleDropdown","placeholder","window","database","brazil","Handle","Slider","suspects","enabled","refuses","deaths","App","React","useState","setDay","setDataType","dragging","index","restProps","prefixCls","overlay","visible","placement","obj","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d34dcfe4.chunk.js","sourcesContent":["const states = [\n{ 'uid' : 11, 'name':  'Rondonia', 'lat': -8.76116, 'lon': -63.90043},\n{ 'uid' : 12, 'name':  'Acre', 'lat': -9.975377, 'lon': -67.8248977 },\n{ 'uid' : 13, 'name':  'Amazonaas', 'lat': -3.1190275, 'lon': -60.02173140000002},\n{ 'uid' : 15, 'name':  'Para', 'lat': -1.4557549, 'lon': -48.49017989999999},\n{ 'uid' : 17, 'name':  'Tocantins', 'lat': -10.184444, 'lon':  -48.333611},\n{ 'uid' : 21, 'name':  'Maranhao', 'lat': -2.53911, 'lon': -44.282905},\n{ 'uid' : 22, 'name':  'Piaui', 'lat':  \t-5.044685, 'lon':  \t-42.766233},\n{ 'uid' : 23, 'name':  'Ceara', 'lat': -3.7318616, 'lon': -38.5266704},\n{ 'uid' : 24, 'name':  'Rio Grande do Norte', 'lat': -5.7792569, 'lon': -35.20091600000001},\n{ 'uid' : 25, 'name':  'Paraiba', 'lat': -7.119496, 'lon': -34.845012},\n{ 'uid' : 26, 'name':  'Pernambuco', 'lat': -8.0578381, 'lon': -34.8828969},\n{ 'uid' : 27, 'name':  'Alagoas', 'lat': -9.649856, 'lon': -35.70892},\n{ 'uid' : 28, 'name':  'Sergipe', 'lat': -10.947247, 'lon': -37.073082},\n{ 'uid' : 29, 'name':  'Bahia', 'lat': -12.9730401, 'lon': -38.50230399999998},\n{ 'uid' : 31, 'name':  'Minas Gerais', 'lat': -19.9166813, 'lon': -43.9344931},\n{ 'uid' : 32, 'name':  'Espirito Santo', 'lat': -20.2976178, 'lon': -40.2957768},\n{ 'uid' : 33, 'name':  'Rio de Janeiro', 'lat': -22.9068467, 'lon': -43.1728965},\n{ 'uid' : 35, 'name':  'Sao Paulo', 'lat': -23.5505199, 'lon': -46.63330939999997},\n{ 'uid' : 41, 'name':  'Parana', 'lat': -25.4289541, 'lon': -49.267137},\n{ 'uid' : 42, 'name':  'Santa Catarina', 'lat': -27.5953778 , 'lon': -48.548049900000024},\n{ 'uid' : 43, 'name':  'Rio Grande do Sul', 'lat': -30.0346471, 'lon': -51.217658400000005},\n{ 'uid' : 50, 'name':  'Mato Grosso do Sul', 'lat': -20.469711 , 'lon': -54.620121},\n{ 'uid' : 51, 'name':  'Mato Grosso', 'lat': -15.601534, 'lon': -56.097889},\n{ 'uid' : 52, 'name':  'Goias', 'lat': -16.6868912, 'lon': -49.264794300000005},\n{ 'uid' : 53, 'name':  'Distrito Federal', 'lat': -15.7942287, 'lon': -47.8821658}\n];\n\nexport default states;","import React from \"react\";\nimport { Map, TileLayer, Circle } from \"react-leaflet\";\nimport L from \"leaflet\";\n\nconst LeafletMap = props => {\n  const getPosition = uId => {\n    for (let i in props.states) {\n      if (props.states[i].uid === uId) {\n        return [props.states[i][\"lat\"], props.states[i][\"lon\"]];\n      }\n    }\n  };\n\n  const Circles = () => {\n    let markers = [];\n    for (let i in props.cases) {\n      const position = getPosition(parseInt(props.cases[i].uid));\n      if (props.cases[i][props.dataType] != undefined) {\n        markers.push(\n          <div>\n            <Circle\n            id={\"circle_\" + i}\n              radius={props.cases[i][props.dataType] * 500}\n              center={position}\n              color={props.color}\n            />\n          </div>\n        );\n      }\n    }\n    return markers;\n  };\n\n  return (\n    <Map center={props.center} zoom={4}>\n      <TileLayer\n        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n      />\n      <Circles />\n    </Map>\n  );\n};\nexport default LeafletMap;\n","import React from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport \"../styles/Linechart.css\";\n\nconst sumStatus = (data, status) => {\n  let count = 0;\n  for (let i in data.values) {\n    const state = data.values[i];\n    if (state[status] != undefined) {\n      count = count + state[status];\n    }\n  }\n  return count;\n};\n\nconst labels = data => {\n  let dates = [];\n  for (let i in data) {\n    dates.push(data[i].date);\n  }\n  return dates;\n};\n\nconst buildDataset = (data, label) => {\n  let values = [];\n  for (let i in data) {\n    values.push(sumStatus(data[i], label));\n  }\n  return values;\n};\n\nconst datasets = (data, dataOptions) => {\n  let datasets = [];\n  for (let key in dataOptions) {\n    datasets.push({\n      label: dataOptions[key].name,\n      data: buildDataset(data, key),\n      borderColor: dataOptions[key].borderColor,\n      backgroundColor: dataOptions[key].backgroundColor\n    });\n  }\n  console.log(datasets);\n  return datasets;\n};\n\nconst chartData = (data, dataOptions) => {\n  return {\n    labels: labels(data),\n    datasets: datasets(data, dataOptions)\n  };\n};\n\nconst LineChart = props => {\n  return (\n    <div>\n      <div className=\"container\">\n        <Line\n          data={chartData(props.data, props.dataOptions)}\n          options={{ responsive: true }}\n        />\n      </div>\n      <div style={{margin:'5em'}}>\n          Fonte: Ministério da Saúde do Brasil.\n      </div>\n    </div>\n  );\n};\n\nexport default LineChart;\n","import React from \"react\";\nimport Slider from \"rc-slider\";\nimport \"rc-slider/assets/index.css\";\nimport \"../styles/Options.css\";\nimport Dropdown from \"react-dropdown\";\n\nimport 'react-dropdown/style.css';\n\nconst statusStyle = status => {\n  return {\n    backgroundColor: status.color\n  };\n};\n\nconst Status = props => {\n  const statusCollection = [];\n  for (let key in props.dataOptions) {\n    const newStatus = props.dataOptions[key];\n    statusCollection.push(\n      <div className={`status-body ${key}`}>\n        <div className={`status-header ${key}`}>{newStatus.name}</div>\n        {props.sumStatus(key)}\n      </div>\n    );\n  }\n  return statusCollection;\n};\n\nconst showOnMapOptions = (dataOptions) => {\n  let options = [];\n  for (let key in dataOptions){\n    options.push({\n      value: key, label: dataOptions[key].name,\n    })\n  }\n  return options;\n}\n\nconst Options = props => {\n  return (\n    <div className=\"Options\">\n      <div className=\"option\">\n        Day: {props.day}\n        <Slider\n          min={0}\n          max={props.data.length - 1}\n          defaultValue={props.data.length - 1}\n          handle={props.handleSlider}\n        />\n      </div>\n      <Status {...props} />\n      Show on map:\n      <Dropdown options={showOnMapOptions(props.dataOptions)}\n      onChange={props.handleDropdown}\n        placeholder=\"Casos Confirmados\" />\n    </div>\n  );\n};\n\nexport default Options;\n","import React from \"react\";\nimport \"../styles/App.css\";\nimport states from \"../states\";\nimport LeafletMap from \"./LeafLetMap\";\nimport LineChart from \"./LineChart\";\nimport Options from \"./Options\";\n\nimport Slider from \"rc-slider\";\nimport Tooltip from \"rc-tooltip\";\n\nconst data = window.database.brazil;\nconst Handle = Slider.Handle;\nconst center = [-15, -52];\n\nconst dataOptions = {\n  suspects: {\n    name: \"Casos Suspeitos\",\n    borderColor: \"royalblue\",\n    backgroundColor:\"cornflowerblue\" ,\n    enabled: false\n  },\n  cases: {\n    name: \"Casos Confirmados\",\n    color: \"red\",\n    borderColor: \"darksalmon\",\n    backgroundColor:\"Salmon\" ,\n    enabled: false\n  },\n  refuses: {\n    name: \"Casos Descartados\",\n    color: \"green\",\n    borderColor: \"darkseagreen\",\n    backgroundColor:\"Seagreen\" ,\n    enabled: false\n  },\n  deaths: {\n    name: \"Óbitos\",\n    color: \"grey\",\n    borderColor: \"LightSteelBlue\",\n    backgroundColor:\"lightslategray\" ,\n    enabled: false\n  }\n};\n\nfunction App() {\n  const [day, setDay] = React.useState(data.length - 1);\n  const [dataType, setDataType] = React.useState(\"cases\");\n\n  const sumStatus = status => {\n    let count = 0;\n    for (let i in data[day].values) {\n      const state = data[day].values[i];\n      if (state[status] != undefined) {\n        count = count + state[status];\n      }\n    }\n    return count;\n  };\n\n  const handleDropdown = obj => {\n    setDataType(obj.value);\n  };\n\n  const handleSlider = props => {\n    const { value, dragging, index, ...restProps } = props;\n    setDay(value);\n    return (\n      <Tooltip\n        prefixCls=\"rc-slider-tooltip\"\n        overlay={value}\n        visible={dragging}\n        placement=\"top\"\n        key={index}\n      >\n        <Handle value={value} {...restProps} />\n      </Tooltip>\n    );\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">Infográfico da Evolução do COVID-19 no Brasil</header>\n      <div className=\"Body\">\n        <Options\n          data={data}\n          handleSlider={handleSlider}\n          day={data[day].date}\n          dataOptions={dataOptions}\n          sumStatus={sumStatus}\n          handleDropdown={handleDropdown}\n        />\n        <div className=\"leaflet-container\">\n          <LeafletMap\n            center={center}\n            states={states}\n            dataType={dataType}\n            color={dataOptions[dataType].borderColor}\n            cases={data[day].values}\n          />\n        </div>\n        <LineChart data={data} dataOptions={dataOptions}/>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './components/App';\n\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}